# coding: utf-8

"""
    DeepLynx

    The construction of megaprojects has consistently demonstrated challenges for project managers in regard to meeting cost, schedule, and performance requirements. Megaproject construction challenges are common place within megaprojects with many active projects in the United States failing to meet cost and schedule efforts by significant margins. Currently, engineering teams operate in siloed tools and disparate teams where connections across design, procurement, and construction systems are translated manually or over brittle point-to-point integrations. The manual nature of data exchange increases the risk of silent errors in the reactor design, with each silent error cascading across the design. These cascading errors lead to uncontrollable risk during construction, resulting in significant delays and cost overruns. DeepLynx allows for an integrated platform during design and operations of mega projects. The DeepLynx Core API delivers a few main features. 1. Provides a set of methods and endpoints for manipulating data in an object oriented database. This allows us to store complex datatypes as records and then to compile them into actual, modifiable objects at run-time. Users can store taxonomies or ontologies in a readable format. 2. Provides methods for storing and retrieving data in a graph database. This data is structured and validated against the aformentioned object oriented database before storage.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import unittest
import os
from dotenv import load_dotenv
import deep_lynx
from deep_lynx.models.create_manual_import import CreateManualImport
from deep_lynx.api.containers_api import ContainersApi
from deep_lynx.api.data_sources_api import DataSourcesApi
from deep_lynx.models.create_container_request import CreateContainerRequest
from deep_lynx.models.create_data_source_request import CreateDataSourceRequest
from deep_lynx.rest import ApiException

class TestCreateManualImport(unittest.TestCase):
    """CreateManualImport unit test stubs"""

    def setUp(self):
        """Set up test environment before each test"""
        # Load environment variables
        load_dotenv()
        
        # Initialize configuration and API client
        self.configuration = deep_lynx.configuration.Configuration()
        self.configuration.host = os.getenv('BASE_URL')
        self.api_client = deep_lynx.ApiClient(self.configuration)
        
        # Set default headers
        self.api_client.default_headers = {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        }
        
        # Initialize authentication API
        auth_api = deep_lynx.AuthenticationApi(self.api_client)
        api_key = os.getenv('API_KEY')
        api_secret = os.getenv('API_SECRET')
        
        # Get OAuth token and set it in configuration and headers
        token = auth_api.retrieve_o_auth_token(
            x_api_key=api_key, 
            x_api_secret=api_secret,
            x_api_expiry='1h'
        )
        self.api_client.configuration.access_token = token
        self.api_client.default_headers['Authorization'] = f'Bearer {token}'
        
        # Initialize APIs with authenticated client
        self.containers_api = ContainersApi(self.api_client)
        self.datasources_api = DataSourcesApi(self.api_client)
        
        # Create a test container
        container_response = self.containers_api.create_container(
            CreateContainerRequest(
                name="test_container",
                description="Container for testing manual imports"
            )
        )
        self.container_id = container_response.value[0].id
        
        # Create a test data source
        datasource_response = self.datasources_api.create_data_source(
            container_id=self.container_id,
            body=CreateDataSourceRequest(
                name="test_source",
                adapter_type="standard",
                active=True
            )
        )
        self.datasource_id = datasource_response.value.id

    def tearDown(self):
        """Clean up after each test"""
        try:
            # Archive the container (this will cascade delete related resources)
            self.containers_api.archive_container(self.container_id)
        except ApiException:
            pass

    def test_create_manual_import(self):
        """Test creating a manual import with test data"""
        # Test data to import
        test_data = {
            "nodes": [
                {
                    "metatype": "test_type",
                    "properties": {
                        "name": "Test Node 1",
                        "description": "First test node",
                        "value": 42
                    }
                },
                {
                    "metatype": "test_type",
                    "properties": {
                        "name": "Test Node 2",
                        "description": "Second test node",
                        "value": 84
                    }
                }
            ],
            "edges": [
                {
                    "relationship_type": "test_relationship",
                    "from_node": "Test Node 1",
                    "to_node": "Test Node 2"
                }
            ]
        }

        try:
            # Create manual import
            import_response = self.datasources_api.create_manual_import(
                container_id=self.container_id,
                data_source_id=self.datasource_id,
                body=test_data
            )
            
            # Verify the import was created
            self.assertIsNotNone(import_response)
            self.assertIn('value', import_response)  # Check for value object
            self.assertIn('id', import_response['value'])  # Check for id in value object
            
            # Get list of imports and find our import by ID
            imports_response = self.datasources_api.list_imports_for_data_source(
                container_id=self.container_id,
                data_source_id=self.datasource_id
            )
            
            # Find our import in the list
            import_status = None
            for import_item in imports_response.value:
                if import_item._id == import_response['value']['id']:
                    import_status = import_item
                    break
                    
            self.assertIsNotNone(import_status)
            self.assertIn('_status', vars(import_status))
            self.assertIn(import_status._status, ['ready', 'completed', 'processing'])
            
        except ApiException as e:
            self.fail(f"API Exception occurred: {str(e)}")

if __name__ == '__main__':
    unittest.main()
